import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import DatePicker from 'react-datepicker';
import { BookingInfo, Button, ErrorMessage, Icon, Info, Input, Wrapper, } from '../../../../../components';
import styles from './Booking.module.css';
import { Link } from 'react-router-dom';
export const BookingLayout = ({ errorFromServer, handleSubmit, handleBookingSubmit, errors, register, startDate, setValue, endDate, isDateDisabled, errorsGeneral, name, booking, }) => {
    return (_jsx(Wrapper, { alwaysAccess: true, error: errorFromServer, children: _jsx("div", { className: styles.content, children: booking ? (_jsxs("div", { className: styles.bookInfo, children: [_jsx(Link, { to: "/bookings", children: _jsx(Icon, { size: '100px', id: 'fa-check', title: "success" }) }), _jsx(BookingInfo, { asdd: 111, id: booking.id, user: booking.user, firstName: booking.firstName, lastName: booking.lastName, phone: booking.phone, checkIn: booking.checkIn, checkOut: booking.checkOut, totalPrice: booking.totalPrice, numOfDays: booking.numOfDays, roomName: booking.roomName })] })) : (_jsxs(_Fragment, { children: [errorsGeneral && _jsx(Info, { children: errorsGeneral }), _jsxs("form", { onSubmit: handleSubmit(handleBookingSubmit), className: styles.bookingForm, children: [_jsx("label", { htmlFor: "firstName", children: "Enter your first name:" }), _jsx(Input, { type: "text", name: "firstName", placeholder: "First name...", ...register('firstName') }), errors?.firstName && (_jsx(ErrorMessage, { children: errors.firstName.message })), _jsx("label", { htmlFor: "lastName", children: "Enter your last name:" }), _jsx(Input, { type: "text", name: "lastName", placeholder: "Last name...", ...register('lastName') }), errors?.lastName && (_jsx(ErrorMessage, { children: errors.lastName.message })), _jsx("label", { htmlFor: "phone", children: "Enter your phone number:" }), _jsx(Input, { type: "tel", name: "phone", placeholder: "Your phone...", ...register('phone') }), errors?.phone && (_jsx(ErrorMessage, { children: errors.phone.message })), _jsx("label", { htmlFor: "startDay", children: "Select check-in date:" }), _jsx(DatePicker, { name: "startDay", className: styles.reactDatepicker, selected: startDate, onChange: (date) => setValue('startDate', date, { shouldValidate: true }), minDate: new Date(), filterDate: (date) => !isDateDisabled(date), selectsStart: true, startDate: startDate, endDate: endDate, dateFormat: "dd.MM.yyyy", placeholderText: "Select your check-in date" }), errors?.startDate && (_jsx(ErrorMessage, { children: errors.startDate.message })), _jsx("label", { htmlFor: "endDay", children: "Select check-out date:" }), _jsx(DatePicker, { className: styles.reactDatepicker, selected: endDate, onChange: (date) => setValue('endDate', date, { shouldValidate: true }), minDate: startDate || new Date(), filterDate: (date) => !isDateDisabled(date), selectsEnd: true, startDate: startDate, endDate: endDate, dateFormat: "dd.MM.yyyy", placeholderText: "Select your check-out date" }), errors?.endDate && (_jsx(ErrorMessage, { children: errors.endDate.message })), _jsxs("div", { className: styles.bookingSection, children: [_jsx(Link, { to: `/rooms/${name}`, children: _jsx(Button, { children: "Cancel" }) }), _jsx(Button, { type: "submit", children: "Save" })] })] })] })) }) }));
};
